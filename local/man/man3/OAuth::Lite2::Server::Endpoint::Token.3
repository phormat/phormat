.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OAuth::Lite2::Server::Endpoint::Token 3"
.TH OAuth::Lite2::Server::Endpoint::Token 3 "2014-01-04" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OAuth::Lite2::Server::Endpoint::Token \- token endpoint PSGI application
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
token_endpoint.psgi
.PP
.Vb 5
\&    use strict;
\&    use warnings;
\&    use Plack::Builder;
\&    use OAuth::Lite2::Server::Endpoint::Token;
\&    use MyDataHandlerClass;
\&
\&    builder {
\&        my $app = OAuth::Lite2::Server::Endpoint::Token\->new(
\&            data_handler => \*(AqMyDataHandlerClass\*(Aq,
\&        );
\&        $app\->support_grant_types(qw(authorization_code refresh_token));
\&        $app;
\&    };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The instance of this class behaves as a \s-1PSGI\s0 application (subroutine reference).
This is for the OAuth 2.0 token-endpoint.
.PP
The first thing you need to do is make your custom class, which inherits OAuth::Lite2::Server::DataHandler, and then setup the \s-1PSGI\s0 file referencing it.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new( %params )"
.el .SS "new( \f(CW%params\fP )"
.IX Subsection "new( %params )"
.IP "data_handler" 4
.IX Item "data_handler"
The name of your custom class that inherits the OAuth::Lite2::Server::DataHandler package.
.IP "error_uri" 4
.IX Item "error_uri"
Optional. This \s-1URI\s0 indicates the page that should be presented on an error. This will be included in error responses.
.ie n .SS "support_grant_type( $type )"
.el .SS "support_grant_type( \f(CW$type\fP )"
.IX Subsection "support_grant_type( $type )"
Indicates support for a specific grant type. This does not remove previously supported grant types. The available values are:
.IP "authorization_code" 4
.IX Item "authorization_code"
.PD 0
.IP "password" 4
.IX Item "password"
.IP "client_credentials" 4
.IX Item "client_credentials"
.IP "refresh_token" 4
.IX Item "refresh_token"
.PD
.ie n .SS "support_grant_types( @types )"
.el .SS "support_grant_types( \f(CW@types\fP )"
.IX Subsection "support_grant_types( @types )"
Allows specification of multiple grant types at once. This is equivalent to calling support_grant_type once for each type in the list. The available values are:
.IP "authorization_code" 4
.IX Item "authorization_code"
.PD 0
.IP "password" 4
.IX Item "password"
.IP "client_credentials" 4
.IX Item "client_credentials"
.IP "refresh_token" 4
.IX Item "refresh_token"
.PD
.SS "data_handler"
.IX Subsection "data_handler"
This returns the class that inherits the OAuth::Lite2::Server::DataHandler package. This is defined by the data_handler parameter of the constructor.
.SS "psgi_app"
.IX Subsection "psgi_app"
This returns a \s-1PSGI\s0 application.
.SS "compile_psgi_app"
.IX Subsection "compile_psgi_app"
This will compile the \s-1PSGI\s0 application.
.ie n .SS "handle_request( $req )"
.el .SS "handle_request( \f(CW$req\fP )"
.IX Subsection "handle_request( $req )"
This will parse the access token request and call the data handler's method.
.SH "TEST"
.IX Header "TEST"
You can test with OAuth::Lite2::Agent::PSGIMock and some of the client classes.
.PP
.Vb 10
\&    my $app = OAuth::Lite2::Server::Endpoint::Token\->new(
\&        data_handler => \*(AqMyDataHandlerClass\*(Aq,
\&    );
\&    $app\->support_grant_types(qw(authorization_code refresh_token));
\&    my $mock_agent = OAuth::Lite2::Agent::PSGIMock\->new(app => $app);
\&    my $client = OAuth::Lite2::Client::UsernameAndPassword\->new(
\&        id     => q{my_client_id},
\&        secret => q{my_client_secret},
\&        agent  => $mock_agent,
\&    );
\&    my $token = $client\->get_access_token(
\&        username => q{foo},
\&        password => q{bar},
\&    );
\&    ok($token);
\&    is($token\->access_token, q{access_token_value});
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ryo Ito, <ritou.06@gmail.com>
.PP
Lyo Kato, <lyo.kato@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 by Lyo Kato
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
