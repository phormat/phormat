.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OAuth::Lite2::Client::UsernameAndPassword 3"
.TH OAuth::Lite2::Client::UsernameAndPassword 3 "2014-01-04" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OAuth::Lite2::Client::UsernameAndPassword \- OAuth 2.0 Username And Password Profile Client
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    my $client = OAuth::Lite2::Client::WebServer\->new(
\&        id               => q{my_client_id},
\&        secret           => q{my_client_secret},
\&        access_token_uri => q{http://example.org/token},
\&    );
\&
\&    sub get_access_token {
\&        my $your_app = shift;
\&
\&        my $access_token = $client\->get_access_token(
\&            username => $your_app\->request\->param("username"), 
\&            password => $your_app\->request\->param("password"), 
\&            scope    => q{photo}, 
\&        ) or return $your_app\->error( $client\->errstr );
\&
\&        $your_app\->store\->save( access_token  => $access_token\->access_token  );
\&        $your_app\->store\->save( expires_at    => time() + $access_token\->expires_in    );
\&        $your_app\->store\->save( refresh_token => $access_token\->refresh_token );
\&    }
\&
\&    sub refresh_access_token {
\&        my $your_app = shift;
\&
\&        my $access_token = $client\->refresh_access_token(
\&            refresh_token => $refresh_token,
\&        ) or return $your_app\->error( $client\->errstr );
\&
\&        $your_app\->store\->save( access_token  => $access_token\->access_token  );
\&        $your_app\->store\->save( expires_at    => time() + $access_token\->expires_in    );
\&        $your_app\->store\->save( refresh_token => $access_token\->refresh_token );
\&    }
\&
\&    sub access_to_protected_resource {
\&        my $your_app = shift;
\&
\&        my $access_token  = $your_app\->store\->get("access_token");
\&        my $expires_at    = $your_app\->store\->get("expires_at");
\&        my $refresh_token = $your_app\->store\->get("refresh_token");
\&
\&        unless ($access_token) {
\&            $your_app\->show_reauthorize_page();
\&            return;
\&        }
\&
\&        if ($expires_at < time()) {
\&            $your_app\->refresh_access_token();
\&            return;
\&        }
\&
\&        my $req = HTTP::Request\->new( GET => q{http://example.org/photo} );
\&        $req\->header( Authorization => sprintf(q{OAuth %s}, $access_token) );
\&        my $agent = LWP::UserAgent\->new;
\&        my $res = $agent\->request($req);
\&        ...
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
OAuth 2.0 Username And Password Profile Client.
.ie n .SS "new( %params )"
.el .SS "new( \f(CW%params\fP )"
.IX Subsection "new( %params )"
.IP "id" 4
.IX Item "id"
Client \s-1ID\s0
.IP "secret" 4
.IX Item "secret"
Client secret
.IP "access_token_uri" 4
.IX Item "access_token_uri"
token endpoint uri on auth-server.
.IP "refresh_token_uri" 4
.IX Item "refresh_token_uri"
refresh-token endpoint uri on auth-server.
if you omit this, access_token_uri is used instead.
.IP "agent" 4
.IX Item "agent"
user agent. if you omit this, LWP::UserAgent's object is set by default.
You can use your custom agent or preset-agents.
.Sp
See also
.Sp
OAuth::Lite2::Agent::Dump
OAuth::Lite2::Agent::Strict
OAuth::Lite2::Agent::PSGIMock
.ie n .SS "get_access_token( %params )"
.el .SS "get_access_token( \f(CW%params\fP )"
.IX Subsection "get_access_token( %params )"
.IP "username" 4
.IX Item "username"
.PD 0
.IP "password" 4
.IX Item "password"
.IP "scope" 4
.IX Item "scope"
.PD
.ie n .SS "refresh_access_token( %params )"
.el .SS "refresh_access_token( \f(CW%params\fP )"
.IX Subsection "refresh_access_token( %params )"
.IP "refresh_token" 4
.IX Item "refresh_token"
.SS "last_request"
.IX Subsection "last_request"
Returns a HTTP::Request object that is used
when you obtain or refresh access token last time internally.
.SS "last_request"
.IX Subsection "last_request"
Returns a HTTP::Response object that is used
when you obtain or refresh access token last time internally.
.SH "AUTHOR"
.IX Header "AUTHOR"
Lyo Kato, <lyo.kato@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 by Lyo Kato
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
